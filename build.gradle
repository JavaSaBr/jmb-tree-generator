import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'application'

group = 'com.spaceshift'
version = '1.2.3'

ext.artifactId = 'tree-generator'

sourceCompatibility = 1.10
targetCompatibility = 1.10

compileTestJava {
    sourceCompatibility = 1.10
    targetCompatibility = 1.10
    options.compilerArgs += '-parameters'
}
ext.junitJupiterVersion = "5.2.0"

mainClassName = "com.ss.editor.DevelopPluginStarter"

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/javasabr/maven" }
}

configurations {
    pluginDependences
}

dependencies {
    compile 'com.spaceshift:jmonkeybuilder:1.9.0'
    compile 'com.github.JavaSaBr:SimArboreal:1.3.0'
    compile 'com.github.JavaSaBr:SimArboreal:1.3.0:assets'

    pluginDependences ('com.github.JavaSaBr:SimArboreal:1.3.0') {
        exclude group: 'org.jmonkeyengine'
        exclude group: 'org.jetbrains'
    }
    pluginDependences ('com.github.JavaSaBr:SimArboreal:1.3.0:assets') {
        exclude group: 'org.jmonkeyengine'
        exclude group: 'org.jetbrains'
    }

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task cleanPluginFolders(type: Delete) {
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
        def deployPlugin = projectFolder.resolve("deploy-plugin")

        if (Files.exists(embeddedPluginsFolder)) {
            GFileUtils.deleteDirectory(embeddedPluginsFolder.toFile())
        }

        if (Files.exists(deployPlugin)) {
            GFileUtils.deleteDirectory(deployPlugin.toFile())
        }
    }
}

task createPluginFolders(dependsOn: 'cleanPluginFolders') {
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")

        Files.createDirectory(embeddedPluginsFolder)

        def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))

        Files.createDirectory(pluginFolder)

        def configuration = configurations.pluginDependences
        def dependencies = configuration.dependencies

        if (dependencies.isEmpty()) {
            return
        }

        def libsFolder = pluginFolder.resolve("libs")

        Files.createDirectory(libsFolder)
    }
}

task copyPluginDependences(type: Copy, dependsOn: ['install', 'createPluginFolders']) {

    def configuration = configurations.pluginDependences
    def dependencies = configuration.dependencies

    if (dependencies.isEmpty()) {
        return
    }

    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))
    def libsFolder = pluginFolder.resolve("libs")

    into libsFolder.toString()
    from configuration
}

task preparePlugin(type: Copy, dependsOn: 'copyPluginDependences') {

    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))

    from jar
    into pluginFolder.toString()
}

task deployPlugin(type: Zip, dependsOn: 'preparePlugin') {
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def deployPluginFolder = projectFolder.resolve("deploy-plugin")

        if (!Files.exists(deployPluginFolder)) {
            Files.createDirectory(deployPluginFolder)
        }
    }

    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))
    def deployPluginFolder = projectFolder.resolve("deploy-plugin")

    from pluginFolder.toString()
    destinationDir = deployPluginFolder.toFile()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

run.dependsOn {
    preparePlugin
}

run.jvmArgs(Arrays.asList(
        "-Xdebug",
        "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
        "-Duser.country=EU",
        "-Duser.language=en"
))
